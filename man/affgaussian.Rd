% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/affinity_gaussian.R
\name{affgaussian}
\alias{affgaussian}
\title{Affinity by Gaussian Kernel}
\usage{
affgaussian(X, bandwidth = "auto")
}
\arguments{
\item{X}{an \eqn{(m\times p)} matrix of row-stacked observations of S3 \code{dist} object of \eqn{m} observations.}

\item{bandwidth}{\eqn{\epsilon} value or \code{"auto"}.}
}
\value{
an \eqn{(m\times m)} affinity matrix of \code{"affinity"} class.
}
\description{
The standard method for constructing the affinity matrix is to use Gaussian kernel. 
When two points \eqn{x_i} and \eqn{x_j} are given, the affinity is computed as 
\deqn{A_{ij} = \exp(-d(x_i, d_j)^2 / 2\epsilon^2)} 
for a bandwidth parameter \eqn{\epsilon}. When the option \code{bandwidth="auto"} is used, 
\eqn{\epsilon} is chosen in an ad hoc manner.
}
\examples{
\donttest{
## load 'iris' data
data("iris")

## extract the numerical part
iris_mat = as.matrix(iris[,1:4])

## compute affinity using different scales
aff1 = affgaussian(iris_mat, bandwidth=0.1)
aff2 = affgaussian(iris_mat, bandwidth=1)
aff3 = affgaussian(iris_mat, bandwidth="auto")

## visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,3), pty="s")
image(aff1, xaxt="n", yaxt="n", xlab="", ylab="", main='bandwidth=0.1')
image(aff2, xaxt="n", yaxt="n", xlab="", ylab="", main='bandwidth=1')
image(aff3, xaxt="n", yaxt="n", xlab="", ylab="", main='bandwidth="auto"')
par(opar)
}

}
\concept{affinity}
